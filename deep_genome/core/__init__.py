from .configuration import Configuration
from .context import AlgorithmContext

_initialised = False
def initialise():
    '''
    Must be called before using deep_genome.core
    
    Any calls but the first are ignored
    '''
    global _initialised
    if _initialised:
        return
    
    import plumbum as pb
    import matplotlib
    import pandas as pd
    from chicken_turtle_util import pymysql as pymysql_
    from functools import wraps
    
    # from Bio import Entrez
    # Entrez.email = 'no-reply@psb.ugent.be'  # TODO perhaps this email address should be user supplied
    
    # init matplotlib
    if not 'DISPLAY' in pb.local.env:
        matplotlib.use('Agg')  # use this backend when no X server
    
    # various
    pymysql_.patch()
    
    # setup logging for testing
    # also log everything to stdout
    # XXX logging.basicConfig is easier to set things up
    import sys
    import logging
    ch = logging.StreamHandler(sys.stdout)
    ch.setLevel(logging.DEBUG)
    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    ch.setFormatter(formatter)
    logging.getLogger().root.addHandler(ch)
    logging.getLogger('deep_genome').setLevel(logging.INFO)
    logging.getLogger('deep_genome').setLevel(logging.DEBUG)
    logging.getLogger('deep_genome.core.Database').setLevel(logging.INFO)
    
    # Fix https://github.com/pydata/pandas/issues/8222 which releases aug 2017 with 0.19.x
    if tuple(map(int, pd.__version__.split('.')[0:1])) < (0, 19):
        applymap_ = pd.DataFrame.applymap
        @wraps(applymap_)
        def monkey_patch(self, *args, **kwargs):
            if self.empty:
                return self
            return applymap_(self, *args, **kwargs)
        pd.DataFrame.applymap = monkey_patch
    
    _initialised = True

__version__ = '0.0.0'  # Auto generated by ct-mksetup, do not edit this line. Project version is only set nonzero on release, using `ct-release`.